name: CI
on: push
env:
  PHP: php81
  PHP_ALPINE_DEPS: >
    php81-ctype php81-curl php81-dom php81-fileinfo php81-xml php81-mbstring
    php81-openssl php81-phar php81-tokenizer php81-xmlwriter php81-session
    php81-pecl-redis php81-pdo_mysql
  COMPOSER_ALPINE_DEPS: >
    php81-curl php81-iconv php81-mbstring php81-openssl php81-phar php81-zip
jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install
        run: npm ci
      - name: build
        run: npm run production
      - name: upload
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: public
  php-install:
    runs-on: ubuntu-latest
    container: alpine:3.16
    steps:
      - uses: actions/checkout@v3
      - name: prepare
        run: apk add composer $PHP $COMPOSER_ALPINE_DEPS $PHP_ALPINE_DEPS
      - name: install
        run: $PHP /usr/bin/composer.phar install
      - name: pack
        run: tar -cf vendor.tar vendor
      - name: upload
        uses: actions/upload-artifact@v3
        with:
          name: vendor-with-dev
          path: vendor.tar
  phpunit:
    needs: php-install
    runs-on: ubuntu-latest
    container: alpine:3.16
    services:
      mariadb:
        image: mariadb
        ports:
          - 3306:3306
        env:
          MARIADB_ROOT_PASSWORD: password
          MARIADB_DATABASE: sashimi
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: vendor-with-dev
      - name: unpack
        run: tar -xf vendor.tar
      - name: prepare
        run: >
          apk add composer $PHP $PHP_ALPINE_DEPS $PHP-pecl-xdebug &&
          printf 'zend_extension=xdebug.so\nxdebug.mode=coverage\n' > /etc/$PHP/conf.d/50_xdebug.ini
      - name: env
        run: cp .env.example .env && $PHP artisan key:generate
      - name: wait
        run: until nc -vzw 1 mariadb 3306; do echo "Wait for database online..."; sleep 1; done
      - name: database
        run: $PHP artisan migrate && $PHP artisan db:seed
      - name: phpunit
        run: $PHP ./vendor/bin/phpunit --coverage-text --colors=never
  php-trim:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: php-install
    runs-on: ubuntu-latest
    container: alpine:3.16
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: vendor-with-dev
      - name: unpack
        run: tar -xf vendor.tar
      - name: prepare
        run: apk add composer $PHP $COMPOSER_ALPINE_DEPS $PHP_ALPINE_DEPS
      - name: trim
        run: $PHP /usr/bin/composer.phar install --no-dev
      - name: pack
        run: tar -cf vendor.tar vendor
      - name: upload
        uses: actions/upload-artifact@v3
        with:
          name: vendor
          path: vendor.tar
  fpm-image:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
      - php-trim
      - phpunit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: vendor-with-dev
      - name: unpack
        run: tar -xf vendor.tar
      - name: login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/fpm
          tags: |
            type=sha,suffix=-${{ github.run_number }}
            type=raw,value=latest,enable={{is_default_branch}}
      - name: build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: containers/Containerfile-fpm
          build-args: |
            PHP=${{ env.PHP }}
            PHP_ALPINE_DEPS=${{ env.PHP_ALPINE_DEPS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
  nginx-image:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: frontend
      - name: login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/nginx
          tags: |
            type=sha,suffix=-${{ github.run_number }}
            type=raw,value=latest,enable={{is_default_branch}}
      - name: build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: containers/Containerfile-nginx
          push: true
          tags: ${{ steps.meta.outputs.tags }}
